using Pbrt.Lights;
using System;
using System.Diagnostics;
using System.Numerics;
using Pbrt.BSDFs;

namespace Pbrt.Core
{
    /// <summary>
    /// Represents local information at a point on a 2D surface
    /// </summary>
    public class SurfaceInteraction
    {
        /// <summary>
        /// Position of the interaction in world space.
        /// </summary>
        public Vector3 Point { get; }

        /// <summary>
        /// Position of the interaction in UV coordinates.
        /// </summary>
        public Vector2 UV { get; }

        /// <summary>
        /// Interaction direction, outgoing from the surface.         
        /// </summary>
        public Vector3 Direction { get; }

        /// <summary>
        /// The <see cref="Core.Shape"/> this surface belongs to.
        /// </summary>
        public Shape Shape { get; }

        /// <summary>
        /// The <see cref="IPrimitive"/> this surface belongs to.
        /// </summary>
        public IPrimitive Primitive { get; internal set; }

        /// <summary>
        /// Geometry information at this point of the surface.
        /// </summary>
        public LocalGeometry LocalGeometry { get; }

        /// <summary>
        /// Represents possibly perturbed values of the <see cref="LocalGeometry"/> property 
        /// as can be generated by bump mapping or interpolated per-vertex normals with triangles.
        /// </summary>
        public LocalGeometry ShadingGeometry { get; }

        public BSDF Bsdf { get; set; }

        public BSSRDF Bssrdf { get; set; }

        public SurfaceInteraction(Vector3 point, Vector2 uv, Vector3 direction, 
            Vector3 dpdu, Vector3 dpdv, Shape shape)            
        {
            Point = point;
            UV = uv;
            Direction = direction;            
            Shape = shape;

            Debug.Assert(dpdu != Vector3.Zero && dpdv != Vector3.Zero);
            Vector3 normal = Vector3.Normalize(Vector3.Cross(dpdu, dpdv));

            // Adjust normal based on orientation and handedness
            if (shape != null && 
                (shape.ReverseOrientation ^ shape.TransformSwapsHandedness))
            {
                normal *= -1;                
            }

            var geometry = new LocalGeometry(normal, dpdu, dpdv);
            LocalGeometry = geometry;
            ShadingGeometry = geometry;
        }

        /// <summary>
        /// Update <see cref="ShadingGeometry"/> when a shading coordinate frame is computed.
        /// </summary>
        public void SetShadingGeometry(Vector3 dpdu, Vector3 dpdv)
        {
            Vector3 shadingNormal = Vector3.Normalize(Vector3.Cross(dpdu, dpdv));
            if (this.Shape != null &&
                (this.Shape.ReverseOrientation ^ this.Shape.TransformSwapsHandedness))
            {
                shadingNormal *= -1;
            }    
        }

        /// <summary>
        /// Returns a <see cref="Spectrum"/> corresponding to the emitted light in the given direction from the surface.
        /// </summary>
        public Spectrum Le(Vector3 direction)
        {
            if (!this.Primitive.TryGetAreaLight(out AreaLight light))
            {
                return Spectrum.Black;
            }

            return light.L(this, direction);
        }

    }

    public class LocalGeometry
    {
        public Vector3 Normal { get; }

        /// <summary>
        /// Partial derivative (U) of the surface (lies in the tangent plane)
        /// </summary>
        public Vector3 DpDu { get; }

        /// <summary>
        /// Partial derivative (V) of the surface (lies in the tangent plane)
        /// </summary>
        public Vector3 DpDv { get; }

        /// <summary>
        /// Differential change in surface normal as we move along U on the surface
        /// </summary>
        //Vector3 dndu;

        /// <summary>
        /// Differential change in surface normal as we move along V on the surface
        /// </summary>
        //Vector3 dndv;

        public LocalGeometry(Vector3 normal, Vector3 dpdu, Vector3 dpdv)
        {
            Normal = normal;
            this.DpDu = dpdu;
            this.DpDv = dpdv;            
        }
    }
}